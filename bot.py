import json
import hashlib
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8215149186:AAExc5YdyNSZatM4npizcuvkV8z1ulG7lk8"
USERS_FILE = "users.json"

def load_users():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=2, ensure_ascii=False)

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(
            "üöÄ ‘≥÷Ä’°’∂÷Å’æ’•’¨ / ’Ñ’∏÷Ç’ø÷Ñ WebApp",
            web_app=WebAppInfo(url="https://garegin845.github.io/web_my/")
        )],
        [InlineKeyboardButton("‚ÑπÔ∏è ’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‘≤’°÷Ä÷á ‚ú®\n‘∏’∂’ø÷Ä’´÷Ä ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’ù",
        reply_markup=reply_markup
    )

# Callback
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data=="help":
        await query.edit_message_text("’ï’£’ø’°’£’∏÷Ä’Æ’´÷Ä WebApp ’Ø’∏’≥’°’Ø’®’ù ’£÷Ä’°’∂÷Å’æ’•’¨’∏÷Ç ’Ø’°’¥ ’¥’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’•’¨’∏÷Ç ’∞’°’¥’°÷Ä")
    else:
        await query.edit_message_text("‘±’µ’Ω ’®’∂’ø÷Ä’°’∂÷Ñ’∂ ’§’•’º ’π’´ ’∞’°’Ω’°’∂’•’¨’´ üòÖ")

# WebApp Data
async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.web_app_data:
        return
    try:
        payload = json.loads(msg.web_app_data.data)
        logger.info(f"Payload: {payload}")
    except Exception as e:
        await msg.reply_text(f"‚ùå ’ç’≠’°’¨ JSON ({e})")
        return

    action = payload.get("action")
    username = payload.get("username", "").strip()
    password = payload.get("password", "")

    if not username or not password:
        await msg.reply_text("‚ùå ‘º÷Ä’°÷Å÷Ä’∏÷Ç username ÷á password")
        return

    users = load_users()
    hpass = hash_password(password)

    if action=="register":
        if username in users:
            await msg.reply_text(f"‚ùå {username} ’°÷Ä’§’•’∂ ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß")
        else:
            users[username] = {"password": hpass}
            save_users(users)
            await msg.reply_text(f"‚úÖ ‘≥÷Ä’°’∂÷Å’æ’•÷Å’´÷Ä ’∏÷Ä’∫’•’Ω {username}")

    elif action=="login":
        if username in users and users[username]["password"]==hpass:
            await msg.reply_text(f"üîë ’Ñ’∏÷Ç’ø÷Ñ ’∞’°’ª’∏’≤’æ’°’Æ {username}!")
        else:
            await msg.reply_text("‚ùå ’ç’≠’°’¨ ’°’∂’∏÷Ç’∂ ’Ø’°’¥ ’£’°’≤’ø’∂’°’¢’°’º")
    else:
        await msg.reply_text(f"‚ö†Ô∏è ‘±’∂’∞’°’µ’ø ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂ {action}")

    # ’à÷Ç’≤’°÷Ä’Ø’•’¨ Telegram-’∏÷Ç’¥ ’£÷Ä’°’∂÷Å’æ’°’Æ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä’´ ÷Å’∏÷Ç÷Å’°’Ø’®
    if users:
        user_list = list(users.keys())
        await msg.reply_text(f"üìã ‘≥÷Ä’°’∂÷Å’æ’°’Æ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä: {', '.join(user_list)}")
    else:
        await msg.reply_text("üìã ‘≥÷Ä’°’∂÷Å’æ’°’Æ ÷Ö’£’ø’°’ø’•÷Ä’•÷Ä ’π’Ø’°’∂")

# Run bot
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp))
    logger.info("Bot started...")
    app.run_polling()

if __name__=="__main__":
    main()
